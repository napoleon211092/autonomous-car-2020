team_name: "team806"
max_speed: 60
max_angle: 50

# ==== General ====
image_size: "320 240"

# ==== debug_flag ====
debug_object_detector: false
debug_lane_detector: false
debug_car_control: false
debug_sign_detector: false
debug_show_fps: false
draw_road_area: true

# ==== Obstacle detector ====
obstacles_folder: "/data/obstacles"


# ==== Traffic Sign detector ====
traffic_sign_detector_svmfile: "/data/svm_an_linear.xml"


# ==== Traffic Sign detector 2 ====
use_traffic_sign_detector_2: false
traffic_sign_detector_2_svmfile: "/data/svm_an_linear.xml"
traffic_sign_detector_2_colorfile: "/data/blue.color"


# ==== Lane detector configs ====

canny_edge_before_floodfill: true
lane_use_watershed_segmentation: true
lane_floodfill_lo: "4 30 100"
lane_floodfill_hi: "4 30 100"

# We have to save floodfill points using a string like this
# We know that yaml format can support array but we want it 
# to be as simple as possible (only key:value format).
# NOTE: THERE SHOULD BE A SPACE IN FRONT OF ALL NUMBERS
lane_floodfill_points: "[[ 150, 230 ],[ 160, 230 ],[ 170, 230 ]]"


# Points for creating transformation matrices
lane_transform_src_tl: "0 100"
lane_transform_src_tr: "319 100"
lane_transform_src_br: "319 239"
lane_transform_src_bl: "0 239"

lane_transform_dst_tl: "0 0"
lane_transform_dst_tr: "319 0"
lane_transform_dst_br: "200 150"
lane_transform_dst_bl: "120 150"

perspective_img_size: "320 150"


# ==== Smart Control ====

# Quick start
# We assume that at the begining, the road is straight so we increase the speed as much as possible
quick_start: true
quick_start_speed: 80
quick_start_time: 5000

# Increase speed!!!
duration_speedup_after_traffic_sign_1: 3000
speed_on_speedup_after_traffic_sign_1: 80
duration_speedup_after_traffic_sign_2: 3000
speed_on_speedup_after_traffic_sign_2: 80


line_diff_to_angle_coeff: -0.5
line_diff_effect_speed_coeff : 2.0

# Adjust middle point. 
# Negative value brings car to the left, 
# Positive value brings car to the right
# Pratical safe range [-20, 20]
middle_point_adjustment: 0

delta_to_angle_coeff: -0.6
# delta: difference between middle point and center point
# angle: the angle to turn the car
# angle: delta * delta_to_angle_coeff

middle_interested_point_pos: 0.6
# position to find an interested point (middle point) of the lane line
# 0.6 means that we find an interested point having y=60%ymax.

min_num_of_middle_points: 10
# Minimum number of middle points found by lane detector.
# If the number of middle points less than this value, do nothing with car controlling


### Traffic sign controlling params ###
turn_on_trafficsign_by_lane_area: true
turn_on_trafficsign_by_passed_time: false
traffic_sign_passed_time_lower_bound: 300
traffic_sign_passed_time_higher_bound: 1000

  
# Minimum area of traffic sign rectangle boundary
min_traffic_sign_bound_area: 600

# Valid duration for traffic sign recognition
traffic_sign_valid_duration: 6000

# Speed when preparing to turn (because of the apearance of a traffic sign)
speed_on_preparing_to_turn_trafficsign: 5

# Using lane area as a signal to turn
# If the lane > this value, change the direction of the car
lane_area_to_turn: 19000

# The angle we use to change direction of the car when we meet a traffic sign
turning_angle_on_trafficsign: 40

speed_on_turning_trafficsign: 40

turning_duration_trafficsign: 1500
